import sys
import unittest
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..','..','..')))
from functions.bot.services.llama_service import LlamaService
from common.file_service import FileService

class TestLlamaServiceIntegration(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        file_service = FileService()
        embeddings = file_service.read_json_from_file('tests/integrations/data', 'embeddings.json')
        cls.service = LlamaService()
        cls.service.add_embeddings(embeddings)

    def test_統合テスト_正常な検索(self):
        for query, expected in self.test_cases:
            # arrange & act
            result = self.service.find_answer(query)
            # assert
            print(f"Testing query: {query}, Expected: {expected}")
            ## self.assertEqual(result.node.metadata['answer'], expected)

    @property
    def test_cases(self):
        """
        テストケースをプロパティとして定義。
        :return: テストケースのリスト
        """
        return [
            ("会社員は対象外ですか？", "社会保険に加入している会社員は対象外です。")
            ,("法人は対象外ですか？", "社会保険に加入している法人格は対象外です。ただし、法人の代表者が社会保険に加入していない場合は対象となります。")
            ,("システムエンジニアは対象ですか？", "対象です。")
            ,("デザイナーは対象ですか？", "対象です。")
            ,("税理士は対象ですか？", "対象です。")
            ,("必要書類の住民票について", "独身でも、配偶者がいる場合でも、世帯全体で取得してください")
            
            ,("配偶者を扶養に入れていないですが、必要ですか？", "対配偶者を扶養に入れない場合でも、住民票は世帯全体で考えてください。象です。")
            ,("フリーランスのこれまでの仕事に影響はありますか？", "影響はありません。今まで通り本業を続けてください。")
            ,("年間の事業所得がどれくらいでメリットがありますか？", "年間の事業所得が約270万円以上の方が、毎月の支払いを削減することができる目安となります。配偶者や扶養がいる場合でも、年収に関わらず経費を削減することができます。")
            ,("会費はどのように納めれば良いでしょうか？", "対象で現状、初回会費は手動での振り込みをお願いしておりますが、次回以降はご登録いただいたクレジットカードでの自動決済(毎月15日)となります。 ※次回以降も手動振り込みをご希望の場合は、事前にご相談ください。す。")
            ,("加入途中で40歳を迎えた場合は会費は変更されますか？", "会費は39歳以下と40歳以上とでテーブルが異なります。期間中に年齢が変わった場合は、会費が途中で変更されることをご承知おきください。別途ご案内いたします。")
            ,("会員費を滞納せざるを得なくなった場合はどうなりますか？", "2ヶ月分の会費を事前連絡なく連続滞納した場合には、強制退会となります。また、未納期間2ヶ月目末時点でまだ未納金が一部でも残っている場合でも、事前連絡の上で退会となります。")
            ,("会費の領収書は発行されますか？", "現状は毎月の領収書発行の運用はしておりません。確定申告などの際には、基本的にはご自身でお支払いしている通帳記録や支払い明細をご活用ください。ただし、確定申告で必要となる各月～12月分のまとまった期間の合計の領収書の発行は、ご相談を承り次第、発行します。")
            ,("社会保険加入後に、何かすることはありますか？", 
            """
            「2024年12月2日に現行の保険証の新規発行は停止されています。
            社会保険の手続きが完了しましたら、最寄りの役所へ行き、これまでの国保の脱退手続きをお願いします。
            ※正社員からフリーランスに転向する場合等、社会保険が切り替わるまでに国保の期間がない場合は役所で必要な手続きはございません。
            ※マイナンバーカードと保険証の紐付けが完了している方はマイナンバーカードをお使いください。
            手続きの詳細については下記のリンクを参照ください。
            https://drive.google.com/file/d/1rtoVIs1szRwUN0YfVEqihPTcjc3rJogM/view?usp=drive_link」
            """)
            ,("フリーランス連盟に加入するまでの国民保険料の支払いについて", "フリーランス連盟への正式加入月の前月分までは国民保険料をお納め下さい。")
            ,("社会保険への加入完了前に病院に行く場合について", "通院する病院の受付にて、社会保険自体は当月頭(正式加入月)から入っている旨を告げ、まずは病院側の指示に従って下さい。")
            ,("養子などで姓が変わった場合、社会保険証はどういう流れで更新されますか？", "ご自身のマイナンバーカードの登録情報を更新いただければ、それに紐づいて社会保険証の情報も自動的に更新されます。")
            ,("親も扶養にできますか？", "できます。")
            ,("確定拠出年金の法人型から個人型への変更", "確定拠出年金(国民年金基金連合会)の法人型から個人型への変更について、記入が必要となる「事業所登録申請書 兼 第2号加入者に係る事業者の証明書」については、別途書き方をフォローいたします。公式LINEにお問い合わせください。")
            ,("厚生年金は本当に支払われていますか？", "支払われています。年金ネットでも状況確認できます。年金ネット")
            ,("フリーランスから会社員に戻った場合は、今まで積み立てしていた厚生年金はどうなりますか？", "過去に支払った厚生年金は、将来の年金受給額に反映されるので無駄にはなりません。")
            ,("フリーランス向けの福利厚生制度にはどんなものがありますか？", "保険・年金制度に加え、健康診断補助、福利厚生施設の割引利用、スキルアップのための講座割引、メンタルヘルスサポートなどがあります。詳細は公式サイトをご覧ください。")
            ,("健康診断の費用は補助されますか？", "年に1度、健康診断の費用を補助しています。具体的な補助額や申請方法については、会員専用ページで確認できます。")
            ,("退会した場合、社会保険の手続きはどうなりますか？", "退会後は国民健康保険や国民年金に戻る必要があります。役所に行き、加入手続きを行ってください。")
            ,("会員資格を途中で解除する場合、会費は返金されますか？", "会費の返金はできません。会費は月単位で発生するため、退会月の翌月以降の請求は停止されますが、退会月分の会費はお支払いが必要です。")
            ,("メールや通知が届かない場合はどうすれば良いですか？", "登録したメールアドレスが正しいか確認してください。また、迷惑メールフォルダに振り分けられていないかも確認してください。それでも解決しない場合は、公式LINEまたはサポート窓口にご連絡ください。")
            ,("フリーランス連盟の紹介キャンペーンはありますか？", "現在、会員からの紹介で入会された場合、双方に特典が付与されるキャンペーンを実施中です。詳細は会員専用サイトをご確認ください。")
        ]

if __name__ == '__main__':
    # 実際のOpenAI APIキーを設定
    os.environ['OPENAI_API_KEY'] = ''
    unittest.main()
